import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'closestNumbers' function below.
     *
     * The function accepts INTEGER_ARRAY numbers as parameter.
     */

    public static void closestNumbers(List<Integer> numbers) {
    // Write your code here
        List<Integer> sortedList = numbers.stream().sorted().collect(Collectors.toList());
        Map<Integer, List<String>> map = new HashMap<>();
        for(int i=0; i<sortedList.size(); i++){
            for(int j=i+1; j<sortedList.size(); j++){
                Integer minusResult = Math.abs(sortedList.get(i) - sortedList.get(j));
                List<String> list;
                if(Objects.isNull(map.get(minusResult))){
                    list = new ArrayList<>();
                }else{
                    list = map.get(minusResult);
                }
                list.add(sortedList.get(i) + " " + sortedList.get(j));
                map.put(minusResult, list);
            }
        }
        
        Optional<Integer> min = map.keySet().stream().min(Integer::compare);
        
        if(min.isPresent()){
            map.get(min.get()).stream().forEach(System.out::println);
        }
        
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int numbersCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> numbers = IntStream.range(0, numbersCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        Result.closestNumbers(numbers);

        bufferedReader.close();
    }
}


-----------------------------------


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'pointsBelong' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER x1
     *  2. INTEGER y1
     *  3. INTEGER x2
     *  4. INTEGER y2
     *  5. INTEGER x3
     *  6. INTEGER y3
     *  7. INTEGER xp
     *  8. INTEGER yp
     *  9. INTEGER xq
     *  10. INTEGER yq
     */
     
    public static double computePoints(int x1, int y1, int x2, int y2){
        Double result;
        if(x1 == x2 || y1 == y2){
            result = (new Double(x1 - x2) + (y1 - y2));
        }else{
            result = Math.sqrt(Math.pow((x1 - x2),2) + Math.pow((x1 - x2),2));
        }
        return result;
    }
    
    public static double Area(int x1, int y1, int x2, int y2, int x3, int y3){
        return new Double(
              (x1*(y2-y3) + x2*(y3-y1) + x3 * (y1-y2)) / 2
        );
    }
    
    public static boolean isPointIn(int x1, int y1, int x2, int y2, int x3, int y3, int xp, int yp){
        double areaTriangle = Result.Area(x1,y1,x2,y2,x3,y3);
        double areaP12 = Result.Area(xp,yp,x1,y1,x2,y2);
        double areaP23 = Result.Area(xp,yp,x2,y2,x3,y3);
        double areaP13 = Result.Area(xp,yp,x1,y1,x3,y3);
        return (areaP12 + areaP23 + areaP13) == areaTriangle;
    }

    public static int pointsBelong(int x1, int y1, int x2, int y2, int x3, int y3, int xp, int yp, int xq, int yq) {
    // Write your code here
        double ab = Result.computePoints(x1, y1, x2, y2);
        double bc = Result.computePoints(x2, y2, x3, y3);
        double ac = Result.computePoints(x1, y1, x3, y3);
        int result = 0;
        if((ab + bc) >= ac && (bc + ac) >= ab && (ab + ac) >= bc){
            //it's a non-degenerate triangle
            boolean pointPIsIn = Result.isPointIn(x1, y1, x2, y2, x3, y3, xp, yp);
            boolean pointQisIn = Result.isPointIn(x1, y1, x2, y2, x3, y3, xq, yq);   
            if(pointPIsIn && pointQisIn)    {
                result = 3;
            }else if(pointPIsIn){
                result = 1;
            }else if(pointQisIn){
                result = 2;
            }else{
                result = 4;
            }
        }
        return result;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int x1 = Integer.parseInt(bufferedReader.readLine().trim());

        int y1 = Integer.parseInt(bufferedReader.readLine().trim());

        int x2 = Integer.parseInt(bufferedReader.readLine().trim());

        int y2 = Integer.parseInt(bufferedReader.readLine().trim());

        int x3 = Integer.parseInt(bufferedReader.readLine().trim());

        int y3 = Integer.parseInt(bufferedReader.readLine().trim());

        int xp = Integer.parseInt(bufferedReader.readLine().trim());

        int yp = Integer.parseInt(bufferedReader.readLine().trim());

        int xq = Integer.parseInt(bufferedReader.readLine().trim());

        int yq = Integer.parseInt(bufferedReader.readLine().trim());

        int result = Result.pointsBelong(x1, y1, x2, y2, x3, y3, xp, yp, xq, yq);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}


----------------------------
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'palindromeChecker' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. INTEGER_ARRAY startIndex
     *  3. INTEGER_ARRAY endIndex
     *  4. INTEGER_ARRAY subs
     */

    public static String palindromeChecker(String s, List<Integer> startIndex, List<Integer> endIndex, List<Integer> subs) {
    // Write your code here
        StringBuffer result = new StringBuffer();
        int sizeStartIndex = startIndex.size();
        int sizeEndIndex = endIndex.size();
        int size = (sizeStartIndex >= sizeEndIndex)? sizeStartIndex :  sizeEndIndex;
        for(int i=0; i < size; i++){
            if(i<startIndex.size() && i<endIndex.size()){
                String substr = s.substring(startIndex.get(i),endIndex.get(i));
                if(i<subs.size()){
                    int nroSubs = subs.get(i);
                    if(nroSubs == 0){
                        //check
                        StringBuilder comp1 = new StringBuilder(substr).reverse();
                        if(comp1.toString().equals(substr)){
                            result = result.append("1");
                        }else{
                            result = result.append("0");
                        }
                    }else{
                        //make substitutions
                    }
                }else{
                    //check
                    StringBuilder comp1 = new StringBuilder(substr).reverse();
                    if(comp1.toString().equals(substr)){
                        result = result.append("1");
                    }else{
                        result = result.append("0");
                    }
                }
            }else{
                result = result.append("0");
            }
        }
        
        return result.toString();
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        int startIndexCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> startIndex = IntStream.range(0, startIndexCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        int endIndexCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> endIndex = IntStream.range(0, endIndexCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        int subsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> subs = IntStream.range(0, subsCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        String result = Result.palindromeChecker(s, startIndex, endIndex, subs);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}



